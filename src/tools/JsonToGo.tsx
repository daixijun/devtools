import React, { useCallback, useEffect, useState } from 'react'
import Split from 'react-split'
import { Button, CodeEditor } from '../components/common'
import { ToolLayout } from '../components/layouts'
import { convertJsonToGo } from '../utils/api'

const JsonToGo: React.FC = () => {
  const [input, setInput] = useState('')
  const [output, setOutput] = useState('')
  const [error, setError] = useState('')
  const [structName, setStructName] = useState('AutoGenerated')
  const [exportedFields, setExportedFields] = useState(true)
  const [isGo118OrAbove, setIsGo118OrAbove] = useState(true)
  const [isGo124OrAbove, setIsGo124OrAbove] = useState(false)
  const [selectedTags, setSelectedTags] = useState<Record<string, boolean>>({
    json: true,
    yaml: false,
    gorm: false,
    db: false,
    sql: false,
    toml: false,
    env: false,
    ini: false,
  })

  const handleConvert = useCallback(async () => {
    if (!input.trim()) {
      setOutput('')
      setError('')
      return
    }

    try {
      setError('')
      const options = {
        struct_name: structName,
        exported_fields: exportedFields,
        is_go_118_or_above: isGo118OrAbove,
        is_go_124_or_above: isGo124OrAbove,
        selected_tags: selectedTags,
      }

      const response = await convertJsonToGo(input, options)
      console.log('API Response:', response)

      if (response.success) {
        setOutput(response.data || '')
      } else {
        setError(response.error || '转换失败')
      }
    } catch (err) {
      setError('转换出错: ' + (err as Error).message)
    }
  }, [
    input,
    structName,
    exportedFields,
    isGo118OrAbove,
    isGo124OrAbove,
    selectedTags,
  ])

  // Auto-conversion effect
  useEffect(() => {
    const timer = setTimeout(() => {
      if (input.trim()) {
        handleConvert()
      }
    }, 500) // 500ms delay to avoid excessive API calls

    return () => clearTimeout(timer)
  }, [
    input,
    structName,
    exportedFields,
    isGo118OrAbove,
    isGo124OrAbove,
    selectedTags,
  ])

  const handleLoadExample = () => {
    const exampleJson = {
      user: {
        id: 123,
        name: '张三',
        email: 'zhangsan@example.com',
        age: 30,
        is_active: true,
        created_at: '2023-01-15T10:30:00Z',
        profile: {
          avatar: 'https://example.com/avatar.jpg',
          bio: '一名资深的Go开发者',
          location: '北京',
          website: 'https://zhangsan.dev',
        },
        tags: ['golang', 'backend', 'microservices'],
        metadata: {
          last_login: '2023-12-20T14:25:30Z',
          login_count: 157,
          preferences: {
            theme: 'dark',
            language: 'zh-CN',
            notifications: true,
          },
        },
      },
    }
    setInput(JSON.stringify(exampleJson, null, 2))
  }

  const handleClearInput = () => {
    setInput('')
    setOutput('')
    setError('')
  }

  return (
    <ToolLayout
      title='JSON 转 Go 结构体'
      subtitle='将JSON数据转换为Go语言的结构体定义，支持多种标签和版本选项'>
      <div className='flex flex-col h-full px-4'>
        {/* 配置选项区域 */}
        <div className='space-y-4 mb-4 flex-shrink-0'>
          <div className='flex flex-wrap items-center gap-4'>
            <div className='flex items-center'>
              <label className='block text-base font-medium text-gray-700 dark:text-gray-300 mr-2 whitespace-nowrap'>
                结构体名称:
              </label>

              <input
                type='text'
                value={structName}
                onChange={(e) => setStructName(e.target.value)}
                className='w-64 px-2 py-1 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white'
                placeholder='结构体名称'
              />
            </div>
            <div className='flex items-center'>
              <label className='flex items-center cursor-pointer'>
                <input
                  type='checkbox'
                  checked={exportedFields}
                  onChange={(e) => setExportedFields(e.target.checked)}
                  className='h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded'
                />
                <span className='text-base font-medium text-gray-700 dark:text-gray-300 ml-2 whitespace-nowrap'>
                  导出字段
                </span>
              </label>
            </div>
            <div className='flex items-center'>
              <label className='flex items-center cursor-pointer'>
                <input
                  type='checkbox'
                  checked={isGo118OrAbove}
                  onChange={(e) => setIsGo118OrAbove(e.target.checked)}
                  className='h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded'
                />
                <span className='text-base font-medium text-gray-700 dark:text-gray-300 ml-2 whitespace-nowrap'>
                  Go 1.18+ (any)
                </span>
              </label>
            </div>
            <div className='flex items-center'>
              <label className='flex items-center cursor-pointer'>
                <input
                  type='checkbox'
                  checked={isGo124OrAbove}
                  onChange={(e) => setIsGo124OrAbove(e.target.checked)}
                  className='h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded'
                />
                <span className='text-base font-medium text-gray-700 dark:text-gray-300 ml-2 whitespace-nowrap'>
                  Go 1.24+ (omitzero)
                </span>
              </label>
            </div>
          </div>

          <div className='flex items-center'>
            <label className='block text-base font-medium text-gray-700 dark:text-gray-300 mr-3'>
              标签选择:
            </label>
            <div className='flex flex-wrap gap-3 flex-1'>
              {Object.entries(selectedTags).map(([tag, isSelected]) => (
                <label
                  key={tag}
                  className='flex items-center cursor-pointer whitespace-nowrap'>
                  <input
                    type='checkbox'
                    checked={isSelected}
                    onChange={(e) =>
                      setSelectedTags((prev) => ({
                        ...prev,
                        [tag]: e.target.checked,
                      }))
                    }
                    className='h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded'
                  />
                  <span className='text-base font-medium text-gray-700 dark:text-gray-300 ml-1 px-2 py-1'>
                    {tag}
                  </span>
                </label>
              ))}
            </div>
          </div>
        </div>

        {/* 编辑器区域 */}
        <div className='flex-1 min-h-0'>
          <Split
            sizes={[50, 50]}
            minSize={200}
            expandToMin={true}
            gutterSize={10}
            gutterAlign='center'
            snapOffset={30}
            dragInterval={1}
            direction='horizontal'
            cursor='col-resize'
            className='flex flex-row gap-4 h-full'>
            <div className='flex flex-col w-full h-full'>
              <div className='p-2 bg-gray-100 dark:bg-gray-700 border-b dark:border-gray-600 flex items-center justify-between flex-shrink-0'>
                <h2 className='font-semibold text-gray-800 dark:text-gray-200'>
                  JSON 输入
                </h2>
                <div className='flex items-center space-x-2'>
                  <Button
                    variant='secondary'
                    size='sm'
                    onClick={handleLoadExample}>
                    示例
                  </Button>
                  <Button
                    variant='secondary'
                    size='sm'
                    onClick={handleClearInput}
                    disabled={!input.trim()}>
                    清空
                  </Button>
                </div>
              </div>
              <div className='flex-1 min-h-0 h-full'>
                <CodeEditor
                  language='json'
                  value={input}
                  onChange={setInput}
                  options={{
                    minimap: { enabled: false },
                    wordWrap: 'off',
                  }}
                />
              </div>
            </div>
            <div className='flex flex-col w-full h-full'>
              <div className='p-2 bg-gray-100 dark:bg-gray-700 border-b dark:border-gray-600 flex-shrink-0'>
                <h2 className='font-semibold text-gray-800 dark:text-gray-200'>
                  Go 结构体输出
                </h2>
              </div>
              <div className='flex-1 min-h-0 h-full'>
                <CodeEditor
                  language='go'
                  value={output}
                  readOnly={true}
                  options={{
                    minimap: { enabled: false },
                    wordWrap: 'off',
                    tabSize: 4,
                    insertSpaces: false,
                  }}
                />
              </div>
            </div>
          </Split>
        </div>

        {error && (
          <div className='mt-4 p-4 bg-red-50 border border-red-200 rounded-lg dark:bg-red-900/20 dark:border-red-800 flex-shrink-0'>
            <div className='flex items-center'>
              <svg
                className='w-5 h-5 text-red-500 mr-2'
                fill='none'
                stroke='currentColor'
                viewBox='0 0 24 24'>
                <path
                  strokeLinecap='round'
                  strokeLinejoin='round'
                  strokeWidth={2}
                  d='M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z'
                />
              </svg>
              <span className='text-red-700 dark:text-red-300 font-medium'>
                {error}
              </span>
            </div>
          </div>
        )}
      </div>
    </ToolLayout>
  )
}

export default JsonToGo
